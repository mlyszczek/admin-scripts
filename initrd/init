#!/bin/busybox sh

PATH=/bin:/sbin:/usr/bin:/usr/sbin

# drop to shell on error
rc=1
trap "test $rc -eq 1 && sh" EXIT
keyfile=/tmp/keyfile
header=/tmp/header
hostname=$(cat /etc/hostname)
usb_max_tries=5


## ==========================================================================
#              / __/__  __ ____   _____ / /_ (_)____   ____   _____
#             / /_ / / / // __ \ / ___// __// // __ \ / __ \ / ___/
#            / __// /_/ // / / // /__ / /_ / // /_/ // / / /(__  )
#           /_/   \__,_//_/ /_/ \___/ \__//_/ \____//_/ /_//____/
## ==========================================================================


## ==========================================================================
#   Configures network. Works only in my internal LAN network. Outside of it
#   USB must be used to initialize everything.
## ==========================================================================
network_up()
{
	ip=$1

	echo ":: network up"
	# it's possible that interface might not yet be up, so try multiple
	# times before calling it a day
	for try in 1 2 3 4 5 6 7 8 9 10; do
		# iterate through all networks
		for ifn in $(ifconfig -a | cut -f1 -d\  | tr -d ':' | awk NF); do
			if [ $ifn = lo -o $ifn = sit0 -o $ifn = wg0 -o $ifn = dummy0 ]; then
				# interfaces we know are not connected to our lan
				continue
			fi

			echo "  :: configuring $ifn to $ip"
			# remove all addresses from interface, in case something is set
			ifconfig $ifn 0.0.0.0
			# set address known address for interface
			ifconfig $ifn up
			ifconfig $ifn $ip netmask 255.255.255.0

			for n in 1 2 3; do
				# check if we can reach kurwik server
				if ping -c1 10.1.1.1 >/dev/null 2>/dev/null; then
					echo "  :: 10.1.1.1 responding on $ifn, lan net is up"
					return 0
				fi
			done

			echo "10.1.1.1 not responding on $ifn"
			ifconfig $ifn 0.0.0.0
			ifconfig $ifn down
			continue
		done

		sleep 1
	done

	echo "!! netwould could not have been configured"
	ifconfig -a
	ip a
	ip r
	sh
}


## ==========================================================================
#   Deconfigure all interfaces before entering real root
## ==========================================================================
network_down()
{
	for ifn in $(ifconfig -a | cut -f1 -d\  | tr -d ':' | awk NF); do
		echo ":: decondiguring $ifn"
		ifconfig $ifn 0.0.0.0
		ifconfig $ifn down
	done
}

## ==========================================================================
#   Tries find keyfile/header on trusted network.
#
#   TODO: implement, duh...
## ==========================================================================
get_key_from_network()
{
	if [ -s $keyfile -a -s $header ]; then
		# keyfile exists, got key from other source,
		return 0
	fi

	# iterate through all networks
	for ifn in $(ifconfig -a | cut -f1 -d\  | tr -d ':' | awk NF); do
		if [ $ifn = lo -o $ifn = sit0 -o $ifn = wg0 -o $ifn = dummy0 ]; then
			# interfaces we know are not connected to our lan
			continue
		fi

		echo ":: configuring $ifn"
		# set address known address for interface
		ifconfig $ifn up
		ifconfig $ifn 10.1.1.251 netmask 255.255.255.0
		ping_ok=0
		for n in 1 2 3 4 5 6 7 8 9 0; do
			if ping -c1 10.1.1.252 >/dev/null 2>/dev/null; then
				ping_ok=1
				break
			fi
		done

		if [ $ping_ok -eq 0 ]; then
			ifconfig -a
			ip a
			ip r
			echo "10.1.1.252 not responding on $ifn"
			ifconfig $ifn 0.0.0.0
			ifconfig $ifn down
			continue
		fi

		echo ":: 10.1.1.252 responding on $ifn, getting keys"
		dbscp -i/.ssh/id_rsa root@10.1.1.252:/keys/$hostname/keyfile $keyfile
		dbscp -i/.ssh/id_rsa root@10.1.1.252:/keys/$hostname/header  $header

		# ip no longer needed for this loop
		ifconfig $ifn 0.0.0.0
		ifconfig $ifn down
		if [ -s $keyfile -a -s $header ]; then
			# got key and header, we're done
			return 0
		fi

		echo "!! error gettings keys from 10.1.1.252 on $ifn"
	done

	echo "!! failed to get keys from any server"
}


## ==========================================================================
#   Finds and mounts crypt-boot pendrive, if key is found it is copied to
#   keyfile. Header is also copied if it's found
## ==========================================================================
get_key_from_usb()
{
	if [ -s $keyfile -a -s $header ]; then
		# keyfile exists, got key from other source,
		return 0
	fi

	echo ":: looking for keys on usb first"
	echo ":: Please insert pendrive with decryption key, I'll give you 1 minute"
	crypt_dev=
	i=1
	while :; do
		printf ":: Looking for crypt-boot, try: %2d/$usb_max_tries... " $i

		for d in /dev/sd*; do
			label=$(e2label $d 2>/dev/null)
			if [ $? -ne 0 ]; then continue; fi
			if [ x$label != xcrypt-boot ]; then continue; fi
			crypt_dev=$d
			break
		done

		if [ "$crypt_dev" ]; then
			echo 'found!'
			break
		else
			echo "not found... damn"
		fi

		sleep 1
		i=$((i+1))
		if [ $i -gt $usb_max_tries ]; then
			echo "!! Failed to open crypt boot device"
			return 0
		fi
	done

	echo ":: mounting crypt keys: $crypt_dev"
	mount $crypt_dev /boot/crypt
	echo ":: copying /boot/crypt/$hostname/keyfile to $keyfile"
	cp /boot/crypt/$hostname/keyfile $keyfile
	if [ -s /boot/crypt/$hostname/header ]; then
		echo ":: copying /boot/crypt/$hostname/header to $header"
		cp /boot/crypt/$hostname/header $header
	fi
	umount /boot/crypt
	return 0
}


## ==========================================================================
#   Reads password to decrypt root from standard input. Detached header is
#   not supported in this mode.
## ==========================================================================
get_key_from_stdin()
{
	if [ -s $keyfile -a -s $header ]; then
		# keyfile exists, got key from other source,
		return 0
	fi

	echo ":: header is obviously not supported in this method"
	echo ":: so I hope you are trying to decrypt disk with attached header:)"
	echo ":: Please provide password for decrypting root (empty to abort): "
	printf ">> password to unlock root fs: "
	read -s pass
	if [ -z "$pass" ]; then
		echo ":: not reading password from stdin"
		return 1
	fi

	printf "%s" "$pass" > $keyfile
}


## ==========================================================================
#   Unmounts virtual filesystems and switches root. /mnt/root should already
#   be mounted with real filesstem
## ==========================================================================
switch_to_new_root()
{
	# unmount pseudo filesystemd - they will be
	# remounted by real os
	umount /sys
	umount /proc
	umount /run
	umount /tmp

	# mark that everything is ok, and at_exit should
	# not drop into rescue shell
	rc=0

	# switch to new root
	echo ":: switching to new root, good luck!"
	exec /sbin/switch_root /mnt/root /sbin/init
}


## ==========================================================================
#   Performs boot on iscsi, skips key fetching and fs is ext4 not zfs
## ==========================================================================
boot_iscsi()
{
	set -- $(cat /proc/cmdline)
	ISCSI_TARGET_IP=10.1.1.1
	ISCSI_TARGET_PORT=3260

	for x in "$@"; do case $x in
		ISCSI_INITIATOR=*)   ISCSI_INITIATOR="${x#ISCSI_INITIATOR=}" ;;
		ISCSI_TARGET_NAME=*) ISCSI_TARGET_NAME="${x#ISCSI_TARGET_NAME=}" ;;
		ISCSI_TARGET_IP=*)   ISCSI_TARGET_IP="${x#ISCSI_TARGET_IP=}" ;;
		ISCSI_TARGET_PORT=*) ISCSI_TARGET_PORT="${x#ISCSI_TARGET_PORT=}" ;;
		IP=*)                IP="${x#IP=}" ;;
	esac; done

	network_up $IP

	initiator_name="iqn.2015-05.pl.kurwinet.client:$hostname"
	target_name="iqn.2015-05.pl.kurwinet:$hostname"
	echo ":: initiator: $initiator_name, target: $target_name"
	mkdir -p /etc/iscsi
	echo "InitiatorName=$initiator_name" > /etc/iscsi/initiatorname.iscsi
	echo ":: starting iscsid"
	iscsid
	echo ":: discovery targets"
	iscsiadm -m discovery -t sendtargets -p 10.1.1.1
	echo ":: connecting to target"
	iscsiadm -m node -T "$target_name" --login
	if [ $? -ne 0 ]; then
		echo "!! failed to connect initiator, dropping to shell"
		echo "!! you can try to manually connect and exit to continue"
		sh
	fi

	# things need to settle before connecting
	sleep 3
	mount /dev/sda /mnt/root
	switch_to_new_root
}

## ==========================================================================
#                          _____ / /_ ____ _ _____ / /_
#                         / ___// __// __ `// ___// __/
#                        (__  )/ /_ / /_/ // /   / /_
#                       /____/ \__/ \__,_//_/    \__/
## ==========================================================================

# mount kernel pseudo filesystems
mount -t devtmpfs devtmpfs /dev
mount -t proc     proc     /proc
mount -t sysfs    sysfs    /sys
mount -t tmpfs    tmpfs    /run
mount -t tmpfs    tmpfs    /tmp
mkdir /run/lock

mknod /dev/console c 5 1
echo ":: initrd starting"

if grep ISCSI_TARGET_IP /proc/cmdline; then
	boot_iscsi
fi

for i in 1 2; do
	# find for key in that order, each function checks if $keyfile is
	# created, if $keyfile exists it means previous step was successfull
	# and next function will immediately exit
	get_key_from_network
	get_key_from_usb
	get_key_from_stdin

	if [ -s $keyfile ]; then
		# found our key, let's bail out
		break
	fi

	echo ":: could not get keyfile from any source, let's try again"
done

if [ ! -s $keyfile ]; then
	echo "!! couldn't find key file, provide one and save it in $keyfile"
	echo "!! alongsied with $header"
	echo "!! when done, exit shell, we'll try to continue"
	sh
fi

echo ":: looking for root device"
for d in $(ls -1 /dev | grep "^sd[a-z]$\|^vd[a-z]\|nvme0n[0-9]\|mmcblk[0-9]$"); do
	echo ":: trying $d"
	# gdisk has stupid idea of going into interactive
	# mode with -l when there is both mbr and gpt
	gdisk_out=$(gdisk -l /dev/$d << EOF
2
EOF
)
	rootpart=$(echo "$gdisk_out" | grep " root$" | awk '{print $1}')
	if [ "$rootpart" ]; then
		case $d in
			sd*)     root_dev=/dev/$d$rootpart ;;
			vd*)     root_dev=/dev/$d$rootpart ;;
			nvme*)   root_dev=/dev/${d}p$rootpart ;;
			mmcblk*) root_dev=/dev/${d}p$rootpart ;;
		esac
		break
	fi
done
if [ -z "$root_dev" ]; then
	echo "!! root device not found, dropping to shell"
	exit 1
fi

echo ":: found root device at: $root_dev"
echo ":: decrypting root"
if [ -s $header ]; then
	cryptsetup luksOpen --key-file $keyfile --header $header $root_dev root
else
	cryptsetup luksOpen --key-file $keyfile $root_dev root
fi
# keys are no longer usefull now, remove them
rm $keyfile $header


# mount rootfs
echo ":: loading zfs modules"
modprobe spl
modprobe zfs

echo ":: importing root pool"
zpool import -N -d /dev/mapper/root root
if [ $? -ne 0 ]; then
	echo ":: trying root-$hostname name"
	# root pool does not exist, try root-$hostname, as it's another
	# name that might be used. It's all because you can't import
	# two pools with same name, and sometimes you need to take
	# root from other os and mount it in another for debug.
	# ah, ok, enough rant, back to program
	zpool import -N -d /dev/mapper/root root-$hostname root
fi
if [ $? -ne 0 ]; then
	echo "!! failed to import zfs root pool, dropping to shell"
	echo "!! you can try to manually import and exit shell to continue"
	sh
fi

echo ":: mounting root pool to /mnt/root"
mount.zfs root /mnt/root

switch_to_new_root
