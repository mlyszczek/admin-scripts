#!/bin/busybox sh


# absolute paths to tools, also all unix tools
# are called via busybox, and since we don't have
# symlinks to busybox, we need to call busybox
# with param to call specific tool
bb="/bin/busybox"
cat="$bb cat"
killall="$bb killall"
modprobe="$bb modprobe"
sleep="$bb sleep"
printf="$bb printf"
mount="$bb mount"
umount="$bb umount"
sh="$bb sh"
awk="$bb awk"
grep="$bb grep"

mount_zfs="/sbin/mount.zfs"
cryptsetup="/sbin/cryptsetup"
zfs="/sbin/zfs"
zpool="/sbin/zpool"
switch_root="/sbin/switch_root"
lsblk="/bin/lsblk"

# on exit drop to shell, if everything goes well
# we call exec and basically never perform EXIT
trap "$sh" EXIT

# mount kernel pseudo filesystems
# -n - don't write to /etc/mtab,
# it will die anyway after root switch
$mount -n -t devtmpfs devtmpfs /dev
$mount -n -t proc     proc     /proc
$mount -n -t sysfs    sysfs    /sys
$mount -n -t tmpfs    tmpfs    /run

mknod /dev/console c 5 1
echo ":: initrd starting"


# decrypt rootfs
echo ":: Please insert pendrive with decryption key, I'll give you 1 minute"
crypt_dev=
i=1
while :; do
	$printf ":: Looking for crypt-boot, try: %2d/60... " $i
	crypt_dev=$($lsblk -l -o name,label | $grep crypt-open | $awk '{print $1}')

	if [ "$crypt_dev" ]; then
		echo 'found!'
		break
	else
		echo "not found... damn"
	fi

	sleep 1
	i=$((i+1))
	if [ $i -gt 60 ]; then
		echo ":: Failed to open crypt boot device"
		echo ":: I will lie down now, and die"
		exit 1
	fi
done

echo ":: mounting crypt keys: $crypt_dev"
$mount $crypt_dev /boot/crypt

echo ":: decrypting root"
root_dev=$($lsblk -l -o name,label | $grep " root" | $awk '{print $1}')
crypt_path=/boot/crypt/$($cat /etc/hostname)
$cryptsetup luksOpen --key-file "${crypt_path}/keyfile" \
	--header "${crypt_path}/header" $root_dev root
# keys are no longer usefull now, unmount them
$unmount /boot/crypt


# mount rootfs
echo ":: loading zfs modules"
$modprobe zfs
echo ":: importing root pool"
$zpool import -N -d /dev/mapper/root root
echo ":: mounting root pool to /mnt/root"
$mount_zfs root /mnt/root


# unmount pseudo filesystemd - they will be
# remounted by real os
$umount /sys
$umount /proc
$umount /run

# switch to new root
echo ":: switching to new root, good luck!"
exec $switch_root /mnt/root /sbin/init
