#!/bin/busybox sh

PATH=/bin:/sbin:/usr/bin:/usr/sbin

# drop to shell on error
rc=1
trap "test $rc -eq 1 && sh" EXIT

# mount kernel pseudo filesystems
mount -t devtmpfs devtmpfs /dev
mount -t proc     proc     /proc
mount -t sysfs    sysfs    /sys
mount -t tmpfs    tmpfs    /run

mknod /dev/console c 5 1
echo ":: initrd starting"


# decrypt rootfs
echo ":: Please insert pendrive with decryption key, I'll give you 1 minute"
crypt_dev=
i=1
while :; do
	printf ":: Looking for crypt-boot, try: %2d/60... " $i
	crypt_dev=$(lsblk -l -o name,label | grep crypt-boot | awk '{print $1}')

	if [ "$crypt_dev" ]; then
		echo 'found!'
		break
	else
		echo "not found... damn"
	fi

	sleep 1
	i=$((i+1))
	if [ $i -gt 60 ]; then
		echo "!! Failed to open crypt boot device"
		echo "!! I will lie down now, and die"
		exit 1
	fi
done

echo ":: mounting crypt keys: $crypt_dev"
mount /dev/$crypt_dev /boot/crypt

echo ":: looking for root device"
for d in $(ls -1 /dev | grep "^sd[a-z]$\|nvme0n[0-9]$"); do
	# gdisk has stupid idea of going into interactive
	# mode with -l when there is both mbr and gpt
	gdisk_out=$(gdisk -l /dev/$d << EOF
2
EOF
)
rootpart=$(echo "$gdisk_out" | grep " root$" | awk '{print $1}')
if [ "$rootpart" ]; then
	case $d in
		sd*)   root_dev=/dev/$d$rootport ;;
		nvme*) root_dev=/dev/${d}p$rootpart ;;
	esac
	break
fi
done
if [ -z "$root_dev" ]; then
	echo "!! root device not found, dropping to shell"
	exit 1
fi

echo ":: found root device at: $root_dev"
echo ":: decrypting root"
crypt_path=/boot/crypt/$(cat /etc/hostname)
cryptsetup luksOpen --key-file "$crypt_path/keyfile" \
	--header "$crypt_path/header" $root_dev root
# keys are no longer usefull now, unmount them
umount /boot/crypt


# mount rootfs
echo ":: loading zfs modules"
# for some reason, in initrd it's not enough to simply modprobe zfs
# and be done with it, looks like initrd is missing some kind of order
# information (?). Anyway, load modules in order to make things to work
for m in spl znvpair zcommon zunicode zzstd zlua icp zavl zfs; do
	modprobe $m
done
echo ":: importing root pool"
zpool import -N -d /dev/mapper/root root
echo ":: mounting root pool to /mnt/root"
mount_zfs root /mnt/root


# unmount pseudo filesystemd - they will be
# remounted by real os
umount /sys
umount /proc
umount /run

# mark that everything is ok, and at_exit should
# not drop into rescue shell
rc=0

# switch to new root
echo ":: switching to new root, good luck!"
exec switch_root /mnt/root /sbin/init
